package cb.ext.dbs.pom;

/*
 * THIS FILE IS GENERATED AUTOMATICALLY, DO NOT MODIFY
 * If corresponding POM is needed to be changed,
 * Do modifications with POMGenerator, and regenerate.
 */

import cb.smg.pom.*;
import cb.smg.general.utility.*;
import cb.smg.businesstype.*;
import cb.smg.businesstype.*;

public class DBSCompanyPOM extends POM {
	public static class DBSCompanyPOMSql implements SqlStatements {

		public final static String insertSql = "INSERT INTO EXT.DBS_COMPANY_DEF (OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE)  VALUES  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		public final static String updateSql = "UPDATE EXT.DBS_COMPANY_DEF SET STATUS=?, LASTUPDATED=?, ACTIVE=?, COMPANYINTERNALCODE=?, CUSTOMERNUMBER=?, WORKINGMETHOD=?, INSERTUSER=?, INSERTDATE=?, INSERTTIME=?, UPDUSER=?, UPDDATE=?, UPDTIME=?, KMHMETHODNAME=?, COMPANYTOTALLIMIT=?, COMPANYMATURITYPERIOD=?, COMPANYPROCESSDAYCOUNT=?, COMPANYLIMITGAPTYPE=?, PARTIALPAYMENT=?, CURRENCYPROCESSMETHOD=?, EXCHANGERATE=?, EXCHANGERATETYPE=?, DEALERCODEFORMATTYPE=?, LOCALCURRENCYCODETYPE=?, DEBTFILESENDTYPE=?, LOADEDOVERLIMITDEBT=?, MANUELPAYMENTBEFOREDUEDATE=?, COMPANYNAME=?, DEALERWITHSAMECUSTOMERNUMBER=?, GUARANTORSHIP=?, GUARANTORSHIPWAITINGTIME=?, KMHLIMITRATE=?, DBSTYPE=? WHERE OID = ? AND LASTUPDATED=?  AND STATUS=1";
		public final static String findByPrimaryKeySql = "SELECT OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE FROM EXT.DBS_COMPANY_DEF WHERE OID = ? AND STATUS=1";
		public final static String findByInternalCodeSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE FROM EXT.DBS_COMPANY_DEF WHERE COMPANYINTERNALCODE = ? AND STATUS=1 ";
		public final static String findByCustomerNoSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE FROM EXT.DBS_COMPANY_DEF WHERE CUSTOMERNUMBER = ? AND STATUS=1 ";
		public final static String findByKMHMethodNameSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE FROM EXT.DBS_COMPANY_DEF WHERE KMHMETHODNAME = ? AND STATUS=1 ";
		public final static String findByCompanyOIDSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE FROM EXT.DBS_COMPANY_DEF WHERE OID = ? AND STATUS=1 ";
		public final static String findByAllRecordsSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE FROM EXT.DBS_COMPANY_DEF WHERE STATUS=1  ORDER BY INSERTDATE ASC, INSERTTIME ASC";
		public final static String findManuelPaymentBeforeDueDateSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE FROM EXT.DBS_COMPANY_DEF WHERE MANUELPAYMENTBEFOREDUEDATE = 1 AND STATUS=1 ";
		public final static String findByCustomerNoAndDBSTypeSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE FROM EXT.DBS_COMPANY_DEF WHERE CUSTOMERNUMBER = ? AND DBSTYPE = ? AND STATUS=1 ";
		public final static String findByDbsTypeSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE FROM EXT.DBS_COMPANY_DEF WHERE DBSTYPE = ? AND STATUS=1  ORDER BY COMPANYINTERNALCODE ASC";
		public static java.util.Hashtable hash;

		public DBSCompanyPOMSql() {
		};
	}

	public static class DBSCompanyPOMHistSql implements SqlStatements {

		public final static String insertSql = "INSERT INTO HST.DBS_COMPANY_DEF SELECT  SMG.EXTTERNAL_OID_SEQ.nextval,sysdate AS START_DATE,NULL AS END_DATE,1 AS ACTIVE_FLAG,?  AS TRANSACTIONOID ,T1.*  FROM EXT.DBS_COMPANY_DEF T1 WHERE OID = ? AND STATUS=1";
		public final static String updateSql = "UPDATE HST.DBS_COMPANY_DEF SET ACTIVE_FLAG = 0,END_DATE=sysdate WHERE OID = ? AND ACTIVE_FLAG = 1";
		public final static String findByPrimaryKeySql = "SELECT OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE,TRANSACTIONOID FROM HST.DBS_COMPANY_DEF WHERE OID = ? AND TRANSACTIONOID < ? AND STATUS=1 ORDER BY LASTUPDATED DESC";
		public final static String findByInternalCodeSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE ,TRANSACTIONOID FROM HST.DBS_COMPANY_DEF WHERE COMPANYINTERNALCODE = ? AND STATUS=1 AND TRANSACTIONOID = ? ";
		public final static String findByCustomerNoSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE ,TRANSACTIONOID FROM HST.DBS_COMPANY_DEF WHERE CUSTOMERNUMBER = ? AND STATUS=1 AND TRANSACTIONOID = ? ";
		public final static String findByKMHMethodNameSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE ,TRANSACTIONOID FROM HST.DBS_COMPANY_DEF WHERE KMHMETHODNAME = ? AND STATUS=1 AND TRANSACTIONOID = ? ";
		public final static String findByCompanyOIDSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE ,TRANSACTIONOID FROM HST.DBS_COMPANY_DEF WHERE OID = ? AND STATUS=1 AND TRANSACTIONOID = ? ";
		public final static String findByAllRecordsSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE ,TRANSACTIONOID FROM HST.DBS_COMPANY_DEF WHERE STATUS=1 AND TRANSACTIONOID = ?  ORDER BY INSERTDATE ASC, INSERTTIME ASC";
		public final static String findManuelPaymentBeforeDueDateSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE ,TRANSACTIONOID FROM HST.DBS_COMPANY_DEF WHERE MANUELPAYMENTBEFOREDUEDATE = 1 AND STATUS=1 AND TRANSACTIONOID = ? ";
		public final static String findByCustomerNoAndDBSTypeSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE ,TRANSACTIONOID FROM HST.DBS_COMPANY_DEF WHERE CUSTOMERNUMBER = ? AND DBSTYPE = ? AND STATUS=1 AND TRANSACTIONOID = ? ";
		public final static String findByDbsTypeSql = " SELECT  OID, STATUS, LASTUPDATED, ACTIVE, COMPANYINTERNALCODE, CUSTOMERNUMBER, WORKINGMETHOD, INSERTUSER, INSERTDATE, INSERTTIME, UPDUSER, UPDDATE, UPDTIME, KMHMETHODNAME, COMPANYTOTALLIMIT, COMPANYMATURITYPERIOD, COMPANYPROCESSDAYCOUNT, COMPANYLIMITGAPTYPE, PARTIALPAYMENT, CURRENCYPROCESSMETHOD, EXCHANGERATE, EXCHANGERATETYPE, DEALERCODEFORMATTYPE, LOCALCURRENCYCODETYPE, DEBTFILESENDTYPE, LOADEDOVERLIMITDEBT, MANUELPAYMENTBEFOREDUEDATE, COMPANYNAME, DEALERWITHSAMECUSTOMERNUMBER, GUARANTORSHIP, GUARANTORSHIPWAITINGTIME, KMHLIMITRATE, DBSTYPE ,TRANSACTIONOID FROM HST.DBS_COMPANY_DEF WHERE DBSTYPE = ? AND STATUS=1 AND TRANSACTIONOID = ?  ORDER BY COMPANYINTERNALCODE ASC";

		public DBSCompanyPOMHistSql() {
		};
	}

	static {
		DBSCompanyPOMSql.hash = new java.util.Hashtable();
		DBSCompanyPOMSql.hash.put("OID", "oID");
		DBSCompanyPOMSql.hash.put("KMHMETHODNAME", "KMHMethodName");
		DBSCompanyPOMSql.hash.put("COMPANYINTERNALCODE", "companyInternalCode");
		DBSCompanyPOMSql.hash.put("DBSTYPE", "dbsType");
		DBSCompanyPOMSql.hash.put("CUSTOMERNUMBER", "customerNumber");
	}

	protected DBSCompanyPOM() {
		super(1);
		dBSCompanyPOMLevel = 0;
		sqlClasses[dBSCompanyPOMLevel] = DBSCompanyPOMSql.class;
		sqlHistClasses[dBSCompanyPOMLevel] = DBSCompanyPOMHistSql.class;
		pomDataClasses[dBSCompanyPOMLevel] = DBSCompanyPOMData.class;
	}

	protected DBSCompanyPOM(int level) {
		super(level + 1);
		dBSCompanyPOMLevel = level;
		sqlClasses[dBSCompanyPOMLevel] = DBSCompanyPOMSql.class;
		sqlHistClasses[dBSCompanyPOMLevel] = DBSCompanyPOMHistSql.class;
		pomDataClasses[dBSCompanyPOMLevel] = DBSCompanyPOMData.class;
	}

	protected int dBSCompanyPOMLevel;
	private static final long dBSCompanyPOMPID = 3000013147800112L;
	private static final String HIST_TABLE_NAME = "HST.DBS_COMPANY_DEF";

	public boolean readByInternalCode(String companyInternalCode)
			throws CBException {
		Object[] params = { companyInternalCode };
		Class[] paramTypes = { String.class };
		return load("findByInternalCodeSql", params, paramTypes,
				dBSCompanyPOMLevel, POMConstants.ONE, true, false);
	}

	public boolean readByInternalCode(String companyInternalCode,
			long historyTransactionOID) throws CBException {
		Object[] params = { companyInternalCode,
				new java.lang.Long(historyTransactionOID) };
		Class[] paramTypes = { String.class, java.lang.Long.class };
		setHistoryTransactionOID(historyTransactionOID);
		return load("findByInternalCodeSql", params, paramTypes,
				dBSCompanyPOMLevel, POMConstants.ONE, true, false);
	}

	public boolean readByCustomerNo(int customerNumber) throws CBException {
		Object[] params = { new java.lang.Integer(customerNumber) };
		Class[] paramTypes = { java.lang.Integer.class };
		return load("findByCustomerNoSql", params, paramTypes,
				dBSCompanyPOMLevel, POMConstants.ONE, true, false);
	}

	public boolean readByCustomerNo(int customerNumber,
			long historyTransactionOID) throws CBException {
		Object[] params = { new java.lang.Integer(customerNumber),
				new java.lang.Long(historyTransactionOID) };
		Class[] paramTypes = { java.lang.Integer.class, java.lang.Long.class };
		setHistoryTransactionOID(historyTransactionOID);
		return load("findByCustomerNoSql", params, paramTypes,
				dBSCompanyPOMLevel, POMConstants.ONE, true, false);
	}

	public boolean readByKMHMethodName(String KMHMethodName) throws CBException {
		Object[] params = { KMHMethodName };
		Class[] paramTypes = { String.class };
		return load("findByKMHMethodNameSql", params, paramTypes,
				dBSCompanyPOMLevel, POMConstants.ONE, true, false);
	}

	public boolean readByKMHMethodName(String KMHMethodName,
			long historyTransactionOID) throws CBException {
		Object[] params = { KMHMethodName,
				new java.lang.Long(historyTransactionOID) };
		Class[] paramTypes = { String.class, java.lang.Long.class };
		setHistoryTransactionOID(historyTransactionOID);
		return load("findByKMHMethodNameSql", params, paramTypes,
				dBSCompanyPOMLevel, POMConstants.ONE, true, false);
	}

	public boolean readByCompanyOID(long oID) throws CBException {
		Object[] params = { new java.lang.Long(oID) };
		Class[] paramTypes = { java.lang.Long.class };
		return load("findByCompanyOIDSql", params, paramTypes,
				dBSCompanyPOMLevel, POMConstants.ONE, true, false);
	}

	public boolean readByCompanyOID(long oID, long historyTransactionOID)
			throws CBException {
		Object[] params = { new java.lang.Long(oID),
				new java.lang.Long(historyTransactionOID) };
		Class[] paramTypes = { java.lang.Long.class, java.lang.Long.class };
		setHistoryTransactionOID(historyTransactionOID);
		return load("findByCompanyOIDSql", params, paramTypes,
				dBSCompanyPOMLevel, POMConstants.ONE, true, false);
	}

	public void readByAllRecords() throws CBException {
		Object[] params = {};
		Class[] paramTypes = {};
		load("findByAllRecordsSql", params, paramTypes, dBSCompanyPOMLevel,
				POMConstants.MANY, true, false);
	}

	public void readByAllRecords(long historyTransactionOID) throws CBException {
		Object[] params = { new java.lang.Long(historyTransactionOID) };
		Class[] paramTypes = { java.lang.Long.class };
		setHistoryTransactionOID(historyTransactionOID);
		load("findByAllRecordsSql", params, paramTypes, dBSCompanyPOMLevel,
				POMConstants.MANY, true, false);
	}

	public void readManuelPaymentBeforeDueDate() throws CBException {
		Object[] params = {};
		Class[] paramTypes = {};
		load("findManuelPaymentBeforeDueDateSql", params, paramTypes,
				dBSCompanyPOMLevel, POMConstants.MANY, true, false);
	}

	public void readManuelPaymentBeforeDueDate(long historyTransactionOID)
			throws CBException {
		Object[] params = { new java.lang.Long(historyTransactionOID) };
		Class[] paramTypes = { java.lang.Long.class };
		setHistoryTransactionOID(historyTransactionOID);
		load("findManuelPaymentBeforeDueDateSql", params, paramTypes,
				dBSCompanyPOMLevel, POMConstants.MANY, true, false);
	}

	public boolean readByCustomerNoAndDBSType(int customerNumber, int dbsType)
			throws CBException {
		Object[] params = { new java.lang.Integer(customerNumber),
				new java.lang.Integer(dbsType) };
		Class[] paramTypes = { java.lang.Integer.class, java.lang.Integer.class };
		return load("findByCustomerNoAndDBSTypeSql", params, paramTypes,
				dBSCompanyPOMLevel, POMConstants.ONE, true, false);
	}

	public boolean readByCustomerNoAndDBSType(int customerNumber, int dbsType,
			long historyTransactionOID) throws CBException {
		Object[] params = { new java.lang.Integer(customerNumber),
				new java.lang.Integer(dbsType),
				new java.lang.Long(historyTransactionOID) };
		Class[] paramTypes = { java.lang.Integer.class,
				java.lang.Integer.class, java.lang.Long.class };
		setHistoryTransactionOID(historyTransactionOID);
		return load("findByCustomerNoAndDBSTypeSql", params, paramTypes,
				dBSCompanyPOMLevel, POMConstants.ONE, true, false);
	}

	public void readByDbsType(int dbsType) throws CBException {
		Object[] params = { new java.lang.Integer(dbsType) };
		Class[] paramTypes = { java.lang.Integer.class };
		load("findByDbsTypeSql", params, paramTypes, dBSCompanyPOMLevel,
				POMConstants.MANY, true, false);
	}

	public void readByDbsType(int dbsType, long historyTransactionOID)
			throws CBException {
		Object[] params = { new java.lang.Integer(dbsType),
				new java.lang.Long(historyTransactionOID) };
		Class[] paramTypes = { java.lang.Integer.class, java.lang.Long.class };
		setHistoryTransactionOID(historyTransactionOID);
		load("findByDbsTypeSql", params, paramTypes, dBSCompanyPOMLevel,
				POMConstants.MANY, true, false);
	}

	public static DBSCompanyPOM newDBSCompanyPOM() {
		DBSCompanyPOM pom = (DBSCompanyPOM) POMPool
				.getFreePOM(dBSCompanyPOMPID);
		if (pom == null) {
			pom = new DBSCompanyPOM();
			POMPool.setPOMAsInUse(pom);
		}
		return pom;
	}

	public DBSCompanyPOMData getDBSCompanyPOMData() {
		return (DBSCompanyPOMData) datas[dBSCompanyPOMLevel];
	}

	public DBSCompanyPOMData findByPrimaryKey(long oID) throws CBException {
		if (readByPrimaryKey(oID))
			return getDBSCompanyPOMData();
		return null;
	}

	public void findByPrimaryKey(long oID, long historyDate) throws CBException {
		Object[] params = { new Long(oID), new Long(historyDate) };
		Class[] paramTypes = { Long.class, Long.class };
		setHistoryTransactionOID(historyDate);
		load("findByPrimaryKeySql", params, paramTypes, dBSCompanyPOMLevel,
				POMConstants.MANY, true, false);
	}

	public long getID() {
		return dBSCompanyPOMPID;
	}

	public void setDBSCompanyPOMData(DBSCompanyPOMData data) {
		datas[dBSCompanyPOMLevel] = data;
		isDirty[dBSCompanyPOMLevel] = true;
	}

	public void updateDBSCompanyPOMData(DBSCompanyPOMData data)
			throws CBException {
		updateDBSCompanyPOMData(data, true);
	}

	public String getHistoryTableName() {
		return HIST_TABLE_NAME;
	}

	public void updateDBSCompanyPOMData(DBSCompanyPOMData data,
			boolean updateHistory) throws CBException {
		if (updateHistory)
			updateHistory = data.isChangedForHistory();
		setDBSCompanyPOMData(data);
		update(updateHistory);
	}

	public void createDBSCompanyPOMData(DBSCompanyPOMData data)
			throws CBException {
		setDBSCompanyPOMData(data);
		create();
	}
}
